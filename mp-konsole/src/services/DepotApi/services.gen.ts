// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetContentData, GetContentResponse, PutContentData, PutContentResponse, DeleteContentResponse, GetCustomersData, GetCustomersResponse, PostCustomersData, PostCustomersResponse, GetCustomersIdData, GetCustomersIdResponse, PutCustomersIdData, PutCustomersIdResponse, DeleteCustomersIdData, DeleteCustomersIdResponse, GetDeliveriesData, GetDeliveriesResponse, PostDeliveriesData, PostDeliveriesResponse, GetDeliveriesIdData, GetDeliveriesIdResponse, PutDeliveriesIdData, PutDeliveriesIdResponse, DeleteDeliveriesIdData, DeleteDeliveriesIdResponse, GetLegalData, GetLegalResponse, PutLegalData, PutLegalResponse, DeleteLegalResponse, GetOrdersData, GetOrdersResponse, PostOrdersData, PostOrdersResponse, GetOrdersIdData, GetOrdersIdResponse, PutOrdersIdData, PutOrdersIdResponse, DeleteOrdersIdData, DeleteOrdersIdResponse, GetPaymentsData, GetPaymentsResponse, PostPaymentsData, PostPaymentsResponse, GetPaymentsIdData, GetPaymentsIdResponse, PutPaymentsIdData, PutPaymentsIdResponse, DeletePaymentsIdData, DeletePaymentsIdResponse, GetProductsData, GetProductsResponse, PostProductsData, PostProductsResponse, GetProductsIdData, GetProductsIdResponse, PutProductsIdData, PutProductsIdResponse, DeleteProductsIdData, DeleteProductsIdResponse, GetProductCoversData, GetProductCoversResponse, PostProductCoversData, PostProductCoversResponse, GetProductCoversIdData, GetProductCoversIdResponse, PutProductCoversIdData, PutProductCoversIdResponse, DeleteProductCoversIdData, DeleteProductCoversIdResponse, GetProductImagesData, GetProductImagesResponse, PostProductImagesData, PostProductImagesResponse, GetProductImagesIdData, GetProductImagesIdResponse, PutProductImagesIdData, PutProductImagesIdResponse, DeleteProductImagesIdData, DeleteProductImagesIdResponse, GetProductPagesData, GetProductPagesResponse, PostProductPagesData, PostProductPagesResponse, GetProductPagesIdData, GetProductPagesIdResponse, PutProductPagesIdData, PutProductPagesIdResponse, DeleteProductPagesIdData, DeleteProductPagesIdResponse, GetProductPatternsData, GetProductPatternsResponse, PostProductPatternsData, PostProductPatternsResponse, GetProductPatternsIdData, GetProductPatternsIdResponse, PutProductPatternsIdData, PutProductPatternsIdResponse, DeleteProductPatternsIdData, DeleteProductPatternsIdResponse, GetProductRulingsData, GetProductRulingsResponse, PostProductRulingsData, PostProductRulingsResponse, GetProductRulingsIdData, GetProductRulingsIdResponse, PutProductRulingsIdData, PutProductRulingsIdResponse, DeleteProductRulingsIdData, DeleteProductRulingsIdResponse, GetVatData, GetVatResponse, PutVatData, PutVatResponse, DeleteVatResponse } from './types.gen';

export class ContentService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ContentResponse OK
     * @throws ApiError
     */
    public static getContent(data: GetContentData = {}): CancelablePromise<GetContentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/content',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ContentResponse OK
     * @throws ApiError
     */
    public static putContent(data: PutContentData): CancelablePromise<PutContentResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/content',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns number OK
     * @throws ApiError
     */
    public static deleteContent(): CancelablePromise<DeleteContentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/content',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class CustomerService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns CustomerListResponse OK
     * @throws ApiError
     */
    public static getCustomers(data: GetCustomersData = {}): CancelablePromise<GetCustomersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customers',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CustomerResponse OK
     * @throws ApiError
     */
    public static postCustomers(data: PostCustomersData): CancelablePromise<PostCustomersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/customers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns CustomerResponse OK
     * @throws ApiError
     */
    public static getCustomersId(data: GetCustomersIdData): CancelablePromise<GetCustomersIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns CustomerResponse OK
     * @throws ApiError
     */
    public static putCustomersId(data: PutCustomersIdData): CancelablePromise<PutCustomersIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/customers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteCustomersId(data: DeleteCustomersIdData): CancelablePromise<DeleteCustomersIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/customers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class DeliveryService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns DeliveryListResponse OK
     * @throws ApiError
     */
    public static getDeliveries(data: GetDeliveriesData = {}): CancelablePromise<GetDeliveriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deliveries',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns DeliveryResponse OK
     * @throws ApiError
     */
    public static postDeliveries(data: PostDeliveriesData): CancelablePromise<PostDeliveriesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/deliveries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns DeliveryResponse OK
     * @throws ApiError
     */
    public static getDeliveriesId(data: GetDeliveriesIdData): CancelablePromise<GetDeliveriesIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/deliveries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns DeliveryResponse OK
     * @throws ApiError
     */
    public static putDeliveriesId(data: PutDeliveriesIdData): CancelablePromise<PutDeliveriesIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/deliveries/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteDeliveriesId(data: DeleteDeliveriesIdData): CancelablePromise<DeleteDeliveriesIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/deliveries/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class LegalService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns LegalResponse OK
     * @throws ApiError
     */
    public static getLegal(data: GetLegalData = {}): CancelablePromise<GetLegalResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/legal',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns LegalResponse OK
     * @throws ApiError
     */
    public static putLegal(data: PutLegalData): CancelablePromise<PutLegalResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/legal',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns number OK
     * @throws ApiError
     */
    public static deleteLegal(): CancelablePromise<DeleteLegalResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/legal',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class OrderService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns OrderListResponse OK
     * @throws ApiError
     */
    public static getOrders(data: GetOrdersData = {}): CancelablePromise<GetOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/orders',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns OrderResponse OK
     * @throws ApiError
     */
    public static postOrders(data: PostOrdersData): CancelablePromise<PostOrdersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/orders',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns OrderResponse OK
     * @throws ApiError
     */
    public static getOrdersId(data: GetOrdersIdData): CancelablePromise<GetOrdersIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/orders/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns OrderResponse OK
     * @throws ApiError
     */
    public static putOrdersId(data: PutOrdersIdData): CancelablePromise<PutOrdersIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/orders/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteOrdersId(data: DeleteOrdersIdData): CancelablePromise<DeleteOrdersIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/orders/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class PaymentService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns PaymentListResponse OK
     * @throws ApiError
     */
    public static getPayments(data: GetPaymentsData = {}): CancelablePromise<GetPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/payments',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PaymentResponse OK
     * @throws ApiError
     */
    public static postPayments(data: PostPaymentsData): CancelablePromise<PostPaymentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/payments',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns PaymentResponse OK
     * @throws ApiError
     */
    public static getPaymentsId(data: GetPaymentsIdData): CancelablePromise<GetPaymentsIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/payments/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns PaymentResponse OK
     * @throws ApiError
     */
    public static putPaymentsId(data: PutPaymentsIdData): CancelablePromise<PutPaymentsIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/payments/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deletePaymentsId(data: DeletePaymentsIdData): CancelablePromise<DeletePaymentsIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/payments/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductListResponse OK
     * @throws ApiError
     */
    public static getProducts(data: GetProductsData = {}): CancelablePromise<GetProductsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/products',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductResponse OK
     * @throws ApiError
     */
    public static postProducts(data: PostProductsData): CancelablePromise<PostProductsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/products',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductResponse OK
     * @throws ApiError
     */
    public static getProductsId(data: GetProductsIdData): CancelablePromise<GetProductsIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductResponse OK
     * @throws ApiError
     */
    public static putProductsId(data: PutProductsIdData): CancelablePromise<PutProductsIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductsId(data: DeleteProductsIdData): CancelablePromise<DeleteProductsIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductCoverService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductCoverListResponse OK
     * @throws ApiError
     */
    public static getProductCovers(data: GetProductCoversData = {}): CancelablePromise<GetProductCoversResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-covers',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductCoverResponse OK
     * @throws ApiError
     */
    public static postProductCovers(data: PostProductCoversData): CancelablePromise<PostProductCoversResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/product-covers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductCoverResponse OK
     * @throws ApiError
     */
    public static getProductCoversId(data: GetProductCoversIdData): CancelablePromise<GetProductCoversIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-covers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductCoverResponse OK
     * @throws ApiError
     */
    public static putProductCoversId(data: PutProductCoversIdData): CancelablePromise<PutProductCoversIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/product-covers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductCoversId(data: DeleteProductCoversIdData): CancelablePromise<DeleteProductCoversIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/product-covers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductImageService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductImageListResponse OK
     * @throws ApiError
     */
    public static getProductImages(data: GetProductImagesData = {}): CancelablePromise<GetProductImagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-images',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductImageResponse OK
     * @throws ApiError
     */
    public static postProductImages(data: PostProductImagesData): CancelablePromise<PostProductImagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/product-images',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductImageResponse OK
     * @throws ApiError
     */
    public static getProductImagesId(data: GetProductImagesIdData): CancelablePromise<GetProductImagesIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-images/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductImageResponse OK
     * @throws ApiError
     */
    public static putProductImagesId(data: PutProductImagesIdData): CancelablePromise<PutProductImagesIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/product-images/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductImagesId(data: DeleteProductImagesIdData): CancelablePromise<DeleteProductImagesIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/product-images/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductPageService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductPageListResponse OK
     * @throws ApiError
     */
    public static getProductPages(data: GetProductPagesData = {}): CancelablePromise<GetProductPagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-pages',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductPageResponse OK
     * @throws ApiError
     */
    public static postProductPages(data: PostProductPagesData): CancelablePromise<PostProductPagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/product-pages',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductPageResponse OK
     * @throws ApiError
     */
    public static getProductPagesId(data: GetProductPagesIdData): CancelablePromise<GetProductPagesIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-pages/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductPageResponse OK
     * @throws ApiError
     */
    public static putProductPagesId(data: PutProductPagesIdData): CancelablePromise<PutProductPagesIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/product-pages/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductPagesId(data: DeleteProductPagesIdData): CancelablePromise<DeleteProductPagesIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/product-pages/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductPatternService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductPatternListResponse OK
     * @throws ApiError
     */
    public static getProductPatterns(data: GetProductPatternsData = {}): CancelablePromise<GetProductPatternsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-patterns',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductPatternResponse OK
     * @throws ApiError
     */
    public static postProductPatterns(data: PostProductPatternsData): CancelablePromise<PostProductPatternsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/product-patterns',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductPatternResponse OK
     * @throws ApiError
     */
    public static getProductPatternsId(data: GetProductPatternsIdData): CancelablePromise<GetProductPatternsIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-patterns/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductPatternResponse OK
     * @throws ApiError
     */
    public static putProductPatternsId(data: PutProductPatternsIdData): CancelablePromise<PutProductPatternsIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/product-patterns/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductPatternsId(data: DeleteProductPatternsIdData): CancelablePromise<DeleteProductPatternsIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/product-patterns/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class ProductRulingService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns ProductRulingListResponse OK
     * @throws ApiError
     */
    public static getProductRulings(data: GetProductRulingsData = {}): CancelablePromise<GetProductRulingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-rulings',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProductRulingResponse OK
     * @throws ApiError
     */
    public static postProductRulings(data: PostProductRulingsData): CancelablePromise<PostProductRulingsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/product-rulings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns ProductRulingResponse OK
     * @throws ApiError
     */
    public static getProductRulingsId(data: GetProductRulingsIdData): CancelablePromise<GetProductRulingsIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/product-rulings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ProductRulingResponse OK
     * @throws ApiError
     */
    public static putProductRulingsId(data: PutProductRulingsIdData): CancelablePromise<PutProductRulingsIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/product-rulings/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns number OK
     * @throws ApiError
     */
    public static deleteProductRulingsId(data: DeleteProductRulingsIdData): CancelablePromise<DeleteProductRulingsIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/product-rulings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}

export class VatService {
    /**
     * @param data The data for the request.
     * @param data.sort Sort by attributes ascending (asc) or descending (desc)
     * @param data.paginationWithCount Return page/pageSize (default: true)
     * @param data.paginationPage Page number (default: 0)
     * @param data.paginationPageSize Page size (default: 25)
     * @param data.paginationStart Offset value (default: 0)
     * @param data.paginationLimit Number of entities to return (default: 25)
     * @param data.fields Fields to return (ex: title,author)
     * @param data.populate Relations to return
     * @param data.filters Filters to apply
     * @param data.locale Locale to apply
     * @returns VatResponse OK
     * @throws ApiError
     */
    public static getVat(data: GetVatData = {}): CancelablePromise<GetVatResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/vat',
            query: {
                sort: data.sort,
                'pagination[withCount]': data.paginationWithCount,
                'pagination[page]': data.paginationPage,
                'pagination[pageSize]': data.paginationPageSize,
                'pagination[start]': data.paginationStart,
                'pagination[limit]': data.paginationLimit,
                fields: data.fields,
                populate: data.populate,
                filters: data.filters,
                locale: data.locale
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns VatResponse OK
     * @throws ApiError
     */
    public static putVat(data: PutVatData): CancelablePromise<PutVatResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/vat',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns number OK
     * @throws ApiError
     */
    public static deleteVat(): CancelablePromise<DeleteVatResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/vat',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}